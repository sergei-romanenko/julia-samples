---
title: "Julia: стадирование и динамическое программирование"
subtitle: "(Longest Common Subsequence)"
author: "Сергей Анатольевич Романенко"
institute: "Институт им. М.В.Келдыша РАН"
# date: today
date: 2025-03-27
bibliography: memo_lcs_slides.bib
# csl: nature-no-superscript.csl
# csl: acm-sig-proceedings.csl
csl: computing-surveys.csl
title-slide-attributes:
  data-background-color: "beige"
format:
  revealjs:
    theme:
      - default
      - memo_lcs_slides.scss
    from: markdown+emoji
    # lang: ru-RU
    code-fold: false
    code-line-numbers: false
    code-block-height: 640px
    slide-number: true
    # smaller: true
    embed-resources: true
    # chalkboard: true
execute:
  echo: true
jupyter: julia-1.11
---

# Предстоящий Путь {.center style="text-align: center;"}

<br><br>
<center>
:dagger: :japanese_ogre: :fire:
<br><br>
**"У самурая нет Цели - а есть только Путь!"**
</center>

## Этапы большого пути...

::: {.incremental}

- Частичные вычисления - это способ генерации программ. Его полезно
  понимать даже вне связи с **практической** пользой, а просто - "для
  расширения сознания". Чтобы понимать, "как мир устроен".
- Во многих случаях, частичных вычислений "в чистом виде" -
  **достаточно**, чтобы получить нужный результат.
- Но иногда - требуется **добавить** что-то ещё.
- Для дополнительного "расширения сознания", полезно находить и изучать
  случаи, когда "чистых" частичных вычислений - **недостаточно**.
- Мы рассмотрим один из таких случаев: вычисление "длины самой длинной
  общей подпоследовательности".
- Это задача, которая решается с помощью "мемоизации".
- Чтобы устранить "административные" затраты связанные с мемоизацией, мы
  "вручную" изготовим **генератор** программ и будем выполнять
  мемоизацию **при генерации** остаточной программы.

:::

# Проблема: найти длину самой длинной общей подпоследовательности

## Решаемая проблема

Подпоследовательность - это строка, сгенерированная из исходной строки
путем удаления 0 или более символов и без изменения относительного
порядка остальных символов.

Например, подпоследовательностями “ABC” являются “”, “A”, “B”, “C”,
“AB”, “AC”, “BC” и “ABC”.

В общем случае, строка длины $n$ имеет $2^n$ подпоследовательностей.

<br>
**Задача.**

> **Заданы две строки s1 и s2. Требуется найти длину самой длинной общей
> подпоследовательности. Если общей подпоследовательности нет - выдать
> 0.**

Обозначим через `lcs(i, j, s1, s2)` длину самой длинной общей
подпоследовательности для `s1[1:i]` и `s2[1:j]`.

## Примеры подпоследовательностей {.smaller}

```{dot}
//| echo: false
//| fig-height: 2.0
//| fig-align: center
graph {
  rankdir=TD
  ranksep="0.3"
  nodesep="0.1"

node [ fontsize=12 shape=circle margin=0.0 width=0.0 ]

u1 [ label="A" ]
u2 [ label="B" ]
u3 [ label="C" ]

v1 [ label="A" ]
v2 [ label="C" ]
v3 [ label="D" ]

{
    rank=same
    edge [ style=invis ]
    u1 -- u2 -- u3
}
{
    rank=same
    edge [ style=invis ]
    v1 -- v2 -- v3
}
{
    edge [ style=invis ]
    // u1 -- v1
    u3 -- v3
}
{
    edge [ constraint=false ]
    u1 -- v1
    u3 -- v2
}
}
```

<hr>

:::: {.columns}

::: {.column width="50%"}

```{dot}
//| echo: false
//| fig-height: 2.0
//| fig-width: 4.0
//| fig-align: center
graph {
  rankdir=TD
  ranksep="0.3"
  nodesep="0.1"

node [ fontsize=14 shape=circle margin=0.0 width=0.0 ]

u1 [ label="A" ]
u2 [ label="B" ]
u3 [ label="C" ]

v1 [ label="C" ]
v2 [ label="B" ]
v3 [ label="A" ]

{
    rank=same
    edge [ style=invis ]
    u1 -- u2 -- u3
}
{
    rank=same
    edge [ style=invis ]
    v1 -- v2 -- v3
}
{
    edge [ style=invis ]
    // u1 -- v1
    u3 -- v3
}
{
    edge [ constraint=false ]
    u1 -- v3
    // u3 -- v2
}
}
```

:::

::: {.column width="50%"}

```{dot}
//| echo: false
//| fig-height: 2.0
//| fig-width: 4.0
//| fig-align: center
graph {
  rankdir=TD
  ranksep="0.3"
  nodesep="0.1"

node [ fontsize=14 shape=circle margin=0.0 width=0.0 ]

u1 [ label="A" ]
u2 [ label="B" ]
u3 [ label="C" ]

v1 [ label="C" ]
v2 [ label="B" ]
v3 [ label="A" ]

{
    rank=same
    edge [ style=invis ]
    u1 -- u2 -- u3
}
{
    rank=same
    edge [ style=invis ]
    v1 -- v2 -- v3
}
{
    edge [ style=invis ]
    // u1 -- v1
    u3 -- v3
}
{
    edge [ constraint=false ]
    // u1 -- v3
    u3 -- v1
}
}
```

:::

::::

<hr>

```{dot}
//| echo: false
//| fig-height: 2.0
//| fig-align: center
graph {
  rankdir=TD
  ranksep="0.3"
  nodesep="0.1"

node [ fontsize=14 shape=circle margin=0.0 width=0.0 ]

u1 [ label="A" ]
u2 [ label="G" ]
u3 [ label="G" ]
u4 [ label="T" ]
u5 [ label="A" ]
u6 [ label="B" ]
u7 [ label="?" style="invis" ]

v1 [ label="G" ]
v2 [ label="X" ]
v3 [ label="T" ]
v4 [ label="X" ]
v5 [ label="A" ]
v6 [ label="Y" ]
v7 [ label="B" ]

{
    rank=same
    edge [ style=invis ]
    u1 -- u2 -- u3 -- u4 -- u5 -- u6 -- u7
}
{
    rank=same
    edge [ style=invis ]
    v1 -- v2 -- v3 -- v4 -- v5 -- v6 -- v7
}
{
    edge [ style=invis ]
    u1 -- v1
    u7 -- v7
}
{
    edge [ constraint=false ]
    u3 -- v1
    u4 -- v3
    u5 -- v5
    u6 -- v7
}
}
```

# Рекурсивный алгоритм

<br>

**Время - $O(2^{\min(m,n)})$, память - $O(\min(m, n))$**

## "Разделяй и властвуй"

:::: {.columns}

::: {.column width="45%"}

**Сведение задачи к подзадачам:**

```{dot}
//| echo: false
//| fig-width: 4.3
//| fig-align: center
digraph {
  rankdir=TD
  ranksep="0.7"
  nodesep="0.4"

node [ fontsize=20 ]
node [ shape=box ]

Problem [ label="Задача" ]
Subproblem1 [ label="Подзадача 1"]
Subproblem2 [ label="Подзадача 2"]

node [ shape=box style=rounded ]
Solution1 [ label="Решение 1"]
Solution2 [ label="Решение 2"]
Solution [ label="Решение"]
Combine12 [ label="" shape=circle fixedsize=true width=0.5]

Problem -> Subproblem1 [ style=dashed ]
Subproblem1 -> Solution1

Problem -> Subproblem2 [ style=dashed ]
Subproblem2 -> Solution2

Solution1 -> Combine12
Solution2 -> Combine12

Combine12 -> Solution
}
```

:::

::: {.column width="55%"}

**При вычислении `lcs(i, j, s1, s2)` рассматриваем 3 случая.**

- `i == 0 || j == 0`. Обе строки пустые.
- `s1[i] == s2[j]`. Сопоставляем `s1[i]` и `s2[j]` и решаем подзадачу
  `lcs(i - 1, j - 1, s1, s2)`.
- В противном случае решаем две подзадачи, lcs(i, j - 1, s1, s2) и
  `lcs(i - 1, j, s1, s2)`.

:::

::::


## "Наивный" рекурсивный алгоритм

Время - $O(2^{\min(m,n)})$, память - $O(\min(m, n))$

```{julia}
#| output: false
# A Naive recursive implementation of LCS problem

# Returns length of LCS for s1[1:i], s2[1:j]
function lcs(i, j, s1, s2)
    if (i == 0 || j == 0)
        0
    elseif (s1[i] == s2[j])
        1 + lcs(i - 1, j - 1, s1, s2)
    else
        max(lcs(i, j - 1, s1, s2), lcs(i - 1, j, s1, s2))
    end
end

lcs(s1, s2) = lcs(length(s1), length(s2), s1, s2)
```

## Тестируем алгоритм

Для тестирования используем пакет `Test`.

```{julia}
using Test

@test lcs("ABC", "ACD") == 2
# The longest common subsequence is “GTAB”.
@test lcs("AGGTAB", "GXTXAYB") == 4
@test lcs("ABC", "CBA") == 1
```

Получается то, что надо...

# Мемоизация

<br>

**Время - $O(m * n)$, память - $O(m * n)$.**

## "Динамическое программирование"

При сведении задачи к подзадачам, может возникать ситуация, когда
решение какой-то подзадачи требуется для построения решения **для
нескольких** подзадач.

В этом случае, можно решить подзадачу, запомнить её решение, а потом -
использовать это решение **несколько раз**.

```{dot}
//| echo: false
//| fig-height: 3.0
//| fig-align: center
digraph {
  rankdir=TD
  ranksep="0.7"
  nodesep="0.4"

node [ fontsize=20 ]
node [ shape=box ]
edge [ style=dashed ]

Problem [ label="Задача" ]
Subproblem11 [ label="Подзадача 1-1"]
Subproblem12 [ label="Подзадача 1-2"]

Subproblem21 [ label="Подзадача 2-1"]
Subproblem22 [ label="Подзадача 2-2" fontcolor=red style=filled ]
Subproblem23 [ label="Подзадача 2-3"]

Problem -> Subproblem11
Problem -> Subproblem12
Subproblem11 -> Subproblem21
Subproblem11 -> Subproblem22
Subproblem12 -> Subproblem22
Subproblem12 -> Subproblem23
}
```

## Рекурсивный алгоритм с мемоизацией

Время - $O(m * n)$, память - $O(m * n)$.

```{julia}
#| output: false
function lcs_memo(d, i, j, s1, s2)
    haskey(d, (i, j)) && return d[(i, j)]

    if (i == 0 || j == 0)
        d[(i, j)] = 0
    else
        if (s1[i] == s2[j])
            d[(i, j)] = 1 + lcs_memo(d, i - 1, j - 1, s1, s2)
        else
            d[(i, j)] = max(lcs_memo(d, i, j - 1, s1, s2),
                            lcs_memo(d, i - 1, j, s1, s2))
        end
    end
end

function lcs_memo(s1, s2)
    d = Dict{Tuple{Int,Int},Int}()
    lcs_memo(d, length(s1), length(s2), s1, s2)
end
```

## Тестируем

```{julia}
@test lcs_memo("ABC", "ACD") == 2
# The longest common subsequence is “GTAB”.
@test lcs_memo("AGGTAB", "GXTXAYB") == 4
@test lcs_memo("ABC", "CBA") == 1
```

Получается то, что надо...

# Специализация `lcs_memo(s1, s2)` по `i` и `j`

## Источники вдохновения

::: {#refs}
:::

Введение в **стадирование** программ: @Taha2004. Стадирование алгоритмов
**динамического программирования** для генерации программ, подходящих
для **ПЛИС/FPGA**: @Kiselyov2004methodology, @Kiselyov2018, @Swadi2005.
Использование **комбинаторов** при стадировании: @Thiemann1999,
@Kameyama2009, @Kiselyov2010.

## "Наивный" генератор.

Берём функцию `lcs_memo` и наивно разделяем части, которые будут
исполняться на первом этапе, и части, которые будут исполняться на
втором этапе.

```{julia}
#| output: false
function lcs_gen_impl_n(i, j)
    if (i == 0 || j == 0)
        0
    else
        :(
            if (s1[$i] == s2[$j])
                1 + $(lcs_gen_impl_n(i - 1, j - 1))
            else
                max($(lcs_gen_impl_n(i, j - 1)), $(lcs_gen_impl_n(i - 1, j)))
            end
        )
    end
end
```

## Вычисляем `lcs_gen_impl_n(2, 3)`

Функция `prettify` используется для очистки генерируемого кода от
"мусора" (ссылок на номера строк в программе-генераторе).

```{julia}
using MacroTools: prettify
```

Теперь посмотрим, что сгенерируется при вызове `lcs_gen_impl_n(2, 3)`!

(Сгенерированное выражение - такое большое, и на этот слайд оно не
влезло. :worried: Смотрим следующий... :arrow_down:)

## Вычисляем `lcs_gen_impl_n(2, 3)`

```{julia}
#| echo: true
#| output-location: default
lcs_gen_impl_n(2, 3) |> prettify
```

<hr>

Получается сложное выражение, в котором есть **совпадающие
подвыражения**.

# Антракт: `generated functions`

<br>

- Нужно как-то встроить наш генератор в процесс компиляции и исполнения
  программ.
- Это можно сделать с помощью **генерирующих функций**.

## "Генерирующие" функции

```{julia}
#| output: false
@generated function bar(x::T) where {T}
    T <: Integer ? :(x^2) : :(x)
end
```

```{julia}
bar(10), bar("Abc")
```

- Перед определением функции пишем аннотацию `@generated`.
- Функция вырабатывает некоторое выражение, которое компилятор считает
  телом функции - и компилирует его. Результат ***запоминается***.
- Сгенерированная функция вызывается со ***значениями*** аргументов.
- Если некоторая комбинация типов аргументов вызова встречается
  несколько раз, генерация тела функции происходит только в ***первый***
  раз.

::: {.callout}
**При генерации, вместо значений параметров передаются их типы!**

Сомнительное решение - лучше бы обращение к параметру считалось ошибкой.

Впрочем, ***значения*** параметров можно просто не использовать... А их
***имена*** употреблять только внутри `:(...)` и `quote ... end`.

:::

## Обёртывание констант в типы

### :fearful::scream::exclamation:

Тип `Val` определён в стандартной библиотеке:

```julia
struct Val{v} end

Val(v) = Val{v}()
```

- Структура типа `Val{v}` не содержит полей и является "пустышкой": вся
  полезная информация содержится в её типе.

- Тип `Val{v}` населён единственным значением, которое порождается
  конструктором с нулевым числом аргументов: `Val{v}()`.
- `Val(v)` - это сокращение для `Val{v}()`.
- Хитрость состоит в том, что параметр `v` может быть "обычной"
  константой!

```{julia}
Val{99}, Val(99), typeof(Val(99)), Val((1, 2, (3, 4)))
```

## Оформляем `lcs_gen_n` как `generated` function

Теперь нужно "подключить" изготовленный нами генератор к
Julia-компилятору. Делаем это через генерирующую функцию.

```{julia}
#| output: false
@generated function lcs_gen_n(::Val{i}, ::Val{j}, s1, s2) where {i,j}
    lcs_gen_impl_n(i, j)
end
```

Чтобы не пугать маленьких детей и пользователей из "простого народа"
такими страшными вещами, как `Val`, определим функцию-переходник.

```{julia}
#| output: false
function lcs_gen_n(s1, s2)
    lcs_gen_n(Val(length(s1)), Val(length(s2)), s1, s2)
end
```

Проверяем:

```{julia}
@test lcs_gen_n("ABC", "ACD") == 2
# The longest common subsequence is “GTAB”.
# @test lcs_gen_n("AGGTAB", "GXTXAYB") == 4
@test lcs_gen_n("ABC", "CBA") == 1
```

Теперь конечному пользователю не видно, что происходит "за сценой", и
ему кажется, что `lcs_gen_n` - это "обыкновенная" функция.

# Продолжение банкета:<br>избавление от глубоко вложенных конструкций

## Промежуточные переменные

Постараемся сгенерировать программу, которая будет удобна для
распараллеливания и не будет "несъедобной" для компилятора из-за слишком
больших и сложных выражений. Посему, сделаем следующее.

- Введём переменные для промежуточных результатов.
- Выражение, вырабатывающее результат для каждой комбинации `i` и `j`
  будем присваивать переменной `r_i_j`.
- Для генерации имён переменных (в виде символов) определим функцию
  `ij2var`.

```{julia}
#| output: false
ij2var(i, j) = Symbol("r_", i, "_", j)
```

## Промежуточные переменные

```{julia}
#| output: false
function lcs_gen_impl_v(i, j)
    if (i == 0 || j == 0)
        0
    else
        r0 = ij2var(i - 1, j - 1)
        r1 = ij2var(i, j - 1)
        r2 = ij2var(i - 1, j)
        :(
            if (s1[$i] == s2[$j])
                $r0 = $(lcs_gen_impl_v(i - 1, j - 1))
                1 + $r0
            else
                $r1 = $(lcs_gen_impl_v(i, j - 1))
                $r2 = $(lcs_gen_impl_v(i - 1, j))
                max($r1, $r2)
            end
        )
    end
end
```

## Проверяем

```{julia}
lcs_gen_impl_v(2, 3) |> prettify
```

<hr>

Видно, что **одни и тех же выражения** в программе **повторяются
несколько раз**. Нехорошо...

## Оформляем `lcs_gen_v` как `generated` function

```{julia}
#| output: false
@generated function lcs_gen_v(::Val{i}, ::Val{j}, s1, s2) where {i,j}
    lcs_gen_impl_v(i, j)
end

function lcs_gen_v(s1, s2)
    lcs_gen_v(Val(length(s1)), Val(length(s2)), s1, s2)
end
```

Проверяем

```{julia}
@test lcs_gen_v("ABC", "ACD") == 2
# The longest common subsequence is “GTAB”.
# @test lcs_gen_v("AGGTAB", "GXTXAYB") == 4
@test lcs_gen_v("ABC", "CBA") == 1
```

# Мемоизация в процессе генерации программы

<!-- 
## Выносим присваивания из-под `if`

Подготовка к мемоизации! Теперь будут выполняться лишние вычисления, но
**асимптотика** от этого **не изменится** (но программу будет легче
распараллеливать).

```{julia}
#| output: false
function lcs_gen_impl_u(i, j)
    if (i == 0 || j == 0)
        0
    else
        r0 = ij2var(i - 1, j - 1)
        r1 = ij2var(i, j - 1)
        r2 = ij2var(i - 1, j)
        :(
            if (s1[$i] == s2[$j])
                $r0 = $(lcs_gen_impl_u(i - 1, j - 1))
                1 + $r0
            else
                $r1 = $(lcs_gen_impl_u(i, j - 1))
                $r2 = $(lcs_gen_impl_u(i - 1, j))
                max($r1, $r2)
            end
        )
    end
end
```

## Проверяем

```{julia}
lcs_gen_impl_u(2, 3) |> prettify
```

<hr>
 -->

<!-- **Недостатки:** (1) Некоторые выражение вычисляется и присваивается
несколько раз, (2) генерируются переменные, которым присваиваются
константы.
 -->

<br><br>

**Две проблемы:**

- Некоторые выражения вычисляются и присваиваются **несколько раз**.
- Генерируются переменные, которым присваиваются **константы**.


## Мемоизация общих подвыражений, подстановка констант

Решение: заводим словарь, в котором регистрируется, какие подвыражения
уже вычислялись, а какие - нет. И не являются ли они константами?

В результате получим асимптотику: время - $O(m * n)$, память - $O(m *
n)$.

```{julia}
#| output: false
function ass!(es, d, s::Symbol, c::Int64)
    d[s] = c
end

function ass!(es, d, s::Symbol, u::Symbol)
    d[s] = u
end

function ass!(es, d, s::Symbol, e)
    haskey(d, s) && return
    push!(es, :($s = $e))
    d[s] = s
end
```

## Мемоизация общих подвыражений, подстановка констант

```{julia}
#| output: false
function lcs_gen_impl_c!(es, d, i, j)
    r = ij2var(i, j)
    haskey(d, r) && return d[r]

    if (i == 0 || j == 0)
        ass!(es, d, r, 0)
    else
        ass!(es, d, r, :(
            if s1[$i] == s2[$j]
                1 + $(lcs_gen_impl_c!(es, d, i - 1, j - 1))
            else
                max($(lcs_gen_impl_c!(es, d, i, j - 1)),
                    $(lcs_gen_impl_c!(es, d, i - 1, j)))
            end
        ))
    end
end
```

## Мемоизация общих подвыражений, подстановка констант

```{julia}
#| output: false
function lcs_gen_impl_c(i, j)
    es = Expr[]
    d = Dict{Symbol,Any}()
    r = lcs_gen_impl_c!(es, d, i, j)

    :($(es...); $r)
end
```

## Проверяем

```{julia}
lcs_gen_impl_c(2, 3) |> prettify
```

<hr>

Теперь получилась "линейная программа": последовательность присваиваний,
в которой каждая переменная получает значение только один раз.

## Оформляем `lcs_gen_c` как `generated` function

```{julia}
#| output: false
@generated function lcs_gen_c(::Val{i}, ::Val{j}, s1, s2) where {i,j}
    lcs_gen_impl_c(i, j)
end

function lcs_gen_c(s1, s2)
    lcs_gen_c(Val(length(s1)), Val(length(s2)), s1, s2)
end
```

Проверяем:

```{julia}
@test lcs_gen_c("ABC", "ACD") == 2
# The longest common subsequence is “GTAB”.
@test lcs_gen_c("AGGTAB", "GXTXAYB") == 4
@test lcs_gen_c("ABC", "CBA") == 1
```

## Переупорядочение вычислений

Между прочим, мы вынесли присваивания вверх, из-под
`if s1[$i] == s2[$j]`! Хорошо это или плохо?

::: {.incremental}

- Если программа генерируется в расчёте на распараллеливания или для
  ПЛИС/FPGA, то лишние вычисления не страшны! Ибо их можно выполнять
  параллельно. Но желательно, чтобы программа была без циклов и лишних
  ветвлений.
- Мы выполняем вычисления, связанные с мемоизацией, на первом этапе. Их
  можно было бы отложить до второго этапа, снабдив каждую переменную
  "флажком", с помощью которого - запоминать, нужно ли вычислять
  значение этой переменной.
- Но тогда манипуляции с флажками получаются дороже, чем лишние
  вычисления выражений.

:::

# Упрощение выражений через переписывание (`Metatheory.jl`)

<br><br>

- Устраняем сложения констант: `1 + 0`.
- Упрощаем выражения: `max(0, y)`.

## Пакет `Metatheory.jl`: реализация правил переписывания

```{julia}
#| output: false
using Metatheory, Metatheory.Rewriters

opt_rules = @theory x y begin

    x::Int64 + y::Int64 => x + y
    # We know that x >= 0 and y >= 0 !
    max(0, y) --> y
    max(x, 0) --> x

end

strategy = (#= Fixpoint ∘ =# Postwalk ∘ Chain)
opt_expr(e) = strategy(opt_rules)(e)
```
Проверяем:
```{julia}
@test opt_expr(:(2 + 3)) == 5
@test opt_expr(:(max(10, 0))) == 10
@test opt_expr(:(max(0, 20))) == 20
@test opt_expr(:(true ? 1 + 2 : 3 + 4)) == :(true ? 3 : 7)
```

## Генерация программы с упрощениями

```{julia}
#| output: false
function ass_o!(es, d, s::Symbol, e)
    ass!(es, d, s, opt_expr(e))
end

function lcs_gen_impl_o!(es, d, i, j)
    r = ij2var(i, j)

    haskey(d, r) && return d[r]

    if (i == 0 || j == 0)
        ass_o!(es, d, r, 0)
    else
        r0 = lcs_gen_impl_o!(es, d, i - 1, j - 1)
        r1 = lcs_gen_impl_o!(es, d, i, j - 1)
        r2 = lcs_gen_impl_o!(es, d, i - 1, j)
        ass_o!(es, d, r, :(
            s1[$i] == s2[$j] ? 1 + $r0 : max($r1, $r2)
        ))
    end
end
```

## Генерация программы с упрощениями

```{julia}
#| output: false
function lcs_gen_impl_o(i, j)
    es = Expr[]
    d = Dict{Symbol,Any}()
    r = lcs_gen_impl_o!(es, d, i, j)

    :($(es...); $r)
end
```

## Проверяем

```{julia}
lcs_gen_impl_o(2, 3) |> prettify
```

<hr>

Присваивания констант и лишние `max` исчезли!

## Оформляем `lcs_gen_o` как `generated` function

```{julia}
#| output: false
@generated function lcs_gen_o(::Val{i}, ::Val{j}, s1, s2) where {i,j}
    lcs_gen_impl_o(i, j)
end

function lcs_gen_o(s1, s2)
    lcs_gen_o(Val(length(s1)), Val(length(s2)), s1, s2)
end
```
Проверяем:
```{julia}
@test lcs_gen_o("ABC", "ACD") == 2
# # The longest common subsequence is “GTAB”.
@test lcs_gen_o("AGGTAB", "GXTXAYB") == 4
@test lcs_gen_o("ABC", "CBA") == 1
```

# Мудрые умозаключения

## Выводы

- Исходная программа - **рекурсивная**, но, после специализации,
  получается **линейная** программа (которая, в частности, подходит для
  FPGA).
- В сгенерированной программе **нет явной мемоизации**, поскольку она
  уже выполнена во время генерации.
- В сгенерированной программе нет **лишних присваиваний** и устранены
  **лишние операции**.
- Качественную специализированную программу **не всегда** удаётся
  получить с помощью "наивного" стадирования или "тупых" частичных
  вычислений.

# Попрание принципов стадирования

## Основные принципы стадирования

- К программе добавляются аннотации, которые говорят о том, на каком
  этапе должны исполняться разные части программы.
- Непротиворечивость аннотаций проверяется автоматически.
- Если стереть аннотации, то получается правильная программа.
- Программу можно исполнить двумя способами.
  1. Стираем аннотации и исполняем программу.
  2. Исполняем программу в два приёма.
     - На первом этапе генерируется остаточная программа.
     - На втором этапе остаточная программа исполняется.

<hr>

Но имеются и **дополнительные** принципы:

- Всё должно быть написано **чисто функционально**.
- **Нельзя "заглядывать"** (inspect) в генерируемый код.

## Проблемы из-за "чистой функциональности"

Под "чистой функциональностью" обычно понимают запрет на использование
**изменяемых данных**.

- Часто требуется работать с глобальными состояниями. Например, при
  генерации уникальных имён переменных. Поэтому, ради стадирования, программу **приходится переделывать** в чисто функциональную.
- Глобальный состояния приходится "продёргивать" через параметры и
  результаты функций. Получается, что (формально) программа написана как
  функциональная, но, на самом деле, является императивной.

## Как преодолеть проблемы из-за "чистой функциональности"?

- Чтобы замаскировать императивную сущность программы приходится
используются "комбинаторы" и "монады".
- Ради стадирования приходится переписывать исходную программу. И часто программа, которая была простой и понятной, становится загадочной.
- Но зато на эту тему изготовлено много статей и диссертаций: :smile:
  @Thiemann1999, @Taha2004, @Kiselyov2004methodology, @Swadi2005
  @Kiselyov2010, @Kameyama2009, @Kiselyov2018.

Но при изготовлении генераторов программ "вручную" можно просто-напросто
использовать **изменяемые данные** (там, где это удобно).

## Проблемы из-за запрета заглядывать в код

- Если писать программу "наивно" и "прямолинейно", то часто возникают случаи, когда код можно упростить. Например, `x * 0` заменить на `0`.
- Чтобы повысить качество кода, есть две возможности.
  1. Вставить в программу дополнительные вычисления, чтобы она
     формулировала и отслеживала разные утверждения по поводу кода. При
     исполнении эти вычисления, как правило, замедляют работу программы.
     Но при стадированном исполнении их можно выполнить на первом этапе
     \- и убрать из программы.
  2. Генерировать код "наивно" - и тут же подчищать его. Но это запрещено в соответствии с принципами стадирования!

## Преодоление ограничений: "абстрактная интерпретация"

- К генерируемому коду присоединяется дополнительная информация (например, является ли значение выражения нулём). И эта информация используется для улучшения сгенерированного кода.
- Этот метод в статьях по стадированию часто называют "абстрактной" интерпретацией. Это противоречит здравому смыслу. "Абстрактное" значение должно получаться за счёт **утраты** части информации, содержащейся в "конкретном" значении, а при стадировании к сгенерированном коду дополнительная информация - **добавляется**.
- При изготовлении генератора программ вручную, можно просто-напросто
  заглядывать в куски изготавливаемого кода и извлекать информацию из
  них напрямую.

## Преодоление ограничений: постпроцессор

- В некоторых статьях по стадированию, исходная программа написана на
  MetaOCaml, а конечная программа (в виде последовательности
  присваиваний) приводится на C++. Перевод с MetaOCaml на C++ делается
  **постпроцессором** (который тихонько подчищает грязь в программе).
- Такой подход является **жульничеством**! Сначала запрещаем заглядывать
  в генерируемый код, а потом (тайком) делаем это в постпроцессоре.
- Если заглядывать в порождаемый код в конкретном генераторе программ,
  то требуется реализовать только **ограниченное** количество
  "подчисток". И многие из них возможны благодаря тому, что имеется
  некоторая **дополнительная информация**. Например, `max(0, x)` можно
  заменять на `x`, если известно, что `x` - не отрицательный.
- Постпроцессор имеет смысл делать только если он будет работать со
  **многими** генераторами. Но тогда - он должен быть сложным и
  "универсальным". Но **не сможет** упрощать выражения вроде
  `max(0, x)`!

## Выводы

::: {.incremental}

- "Правильное" стадирование основано на некоторых принципах, которые, в
  теории, выглядят красиво и привлекательно.
- Однако, "гладко было на бумаге - да забыли про овраги"! Поэтому,
  авторы этих принципов придумали несколько приёмов, с помощью которых
  можно лицемерно обходить эти принципы.
-  При изготовлении генераторов программ "вручную", часто бывает выгодно
   отклоняться от этих принципов.

:::

# Использование комбинаторов для генерации программ

- Можно **отделить** мемоизацию от генерации ("разделение аспектов").
- Генератор можно заставить работать как с мемоизацией, так и **без
  неё**.
- Реализацию мемоизации можно использовать для **разных** генераторов.

## Классический `fix`

Можно "упрятать" рекурсию в комбинатор `fix`.

```{julia}
#| output: false
fix(f, xs...) = f((ys...) -> fix(f, ys...), xs...)
```

Тогда рекурсивную функцию можно превратить в (как бы) нерекурсивную.

```{julia}
#| output: false
gib_step(self, n, x, y) =
    if n == 0
        x
    elseif n == 1
        y
    else
        self(n - 2, x, y) + self(n - 1, x, y)
    end
```

И вызывать её с помощью `fix`.

```{julia}
@test Tuple(fix(gib_step, n, 2, 3) for n in 0:10) ==
      (2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233)
```

Работает... Но выглядит как явное **извращение**! Зачем так делать?

## Оператор неподвижной точки с мемоизацией

Добавляем в классический `fix` дополнительные параметры (и действия).

- `es` - список присваиваний.
- `xs2var` - функция, которая выдаёт имя переменной на основе `xs`.
- `step` - "шаг" генерации.

```{julia}
#| output: false
function fix_gen!(es, xs2var, step, xs...)
    e = step((ys...) -> fix_gen!(es, xs2var, step, ys...), xs...)
    r = xs2var(xs...)
    push!(es, :($r = $e))
    r
end

function fix_gen(xs2var, step, xs...)
    es = Expr[]
    e = fix_gen!(es, xs2var, step, xs...)
    :($(es...); $e)
end
```

## "Шаг" генерации

```{julia}
#| output: false
function lcs_gen_step(self, i, j)
    if (i == 0 || j == 0)
        0
    else
        r0 = self(i - 1, j - 1)
        r1 = self(i, j - 1)
        r2 = self(i - 1, j)
        :(s1[$i] == s2[$j] ? 1 + $r0 : max($r1, $r2))
    end
end
```

Проверяем. (Результат - следующий слайд. :arrow_down:)

```{julia}
#| output-location: slide
fix_gen(ij2var, lcs_gen_step, 2, 3) |> prettify
```

## Вынос мемоизации в комбинатор

```{julia}
#| output: false
function fix_gen_memo!(d, es, key, step, xs...)
    r = key(xs...)
    haskey(d, r) && return d[r]
    e = step((ys...) -> fix_gen_memo!(d, es, key, step, ys...), xs...)
    push!(es, :($r = $e))
    d[r] = r
end

function fix_gen_memo(key, step, xs...)
    es = Expr[]
    e = fix_gen_memo!(Dict(), es, key, step, xs...)
    :($(es...); $e)
end
```

Проверяем. (Результат - следующий слайд. :arrow_down:)

```{julia}
#| output-location: slide
fix_gen_memo(ij2var, lcs_gen_step, 2, 3) |> prettify
```
## Распространение констант

```{julia}
#| output: false
function fix_gen_memo_c!(d, es, key, step, xs...)
    r = key(xs...)
    haskey(d, r) && return d[r]
    e = step((ys...) -> fix_gen_memo_c!(d, es, key, step, ys...), xs...)
    ass!(es, d, r, e)
end

function fix_gen_memo_c(key, step, xs...)
    es = Expr[]
    e = fix_gen_memo_c!(Dict(), es, key, step, xs...)
    :($(es...); $e)
end
```

Проверяем. (Результат - следующий слайд. :arrow_down:)

```{julia}
#| output-location: slide
fix_gen_memo_c(ij2var, lcs_gen_step, 2, 3) |> prettify
```

## Оптимизация выражений


```{julia}
#| output: false
function fix_gen_memo_o!(d, es, key, step, xs...)
    r = key(xs...)
    haskey(d, r) && return d[r]
    e = step((ys...) -> fix_gen_memo_o!(d, es, key, step, ys...), xs...)
    ass!(es, d, r, opt_expr(e))
end

function fix_gen_memo_o(key, step, xs...)
    es = Expr[]
    e = fix_gen_memo_o!(Dict(), es, key, step, xs...)
    :($(es...); $e)
end
```

Проверяем. (Результат - следующий слайд. :arrow_down:)

```{julia}
#| output-location: slide
fix_gen_memo_o(ij2var, lcs_gen_step, 2, 3) |> prettify
```

## Оформляем как генерирующую функцию

```{julia}
#| output: false
@generated function lcs_fix_gen_o(::Val{i}, ::Val{j}, s1, s2) where {i,j}
    fix_gen_memo_o(ij2var, lcs_gen_step, i, j)
end

function lcs_fix_gen_o(s1, s2)
    lcs_fix_gen_o(Val(length(s1)), Val(length(s2)), s1, s2)
end
```

Проверяем.

```{julia}
@test lcs_fix_gen_o("ABC", "ACD") == 2
# # The longest common subsequence is “GTAB”.
@test lcs_fix_gen_o("AGGTAB", "GXTXAYB") == 4
@test lcs_fix_gen_o("ABC", "CBA") == 1
```

## Выводы

::: {.incremental}

- Комбинаторы позволяют "выносить за скобки" механизмы мемоизации и
  "подчистки" выражений.
- Комбинаторы прекрасно сочетаются с использованием изменяемых данных.
- Не обязательно всё укладывать в "прокрустово ложе" канонических
  комбинаторов: можно (без труда) создавать специализированные
  комбинаторы под конкретные ситуации.

:::

# Конец фильма {.center style="text-align: center;"}

<br><br>
**Но - не конец Пути!** :dragon: :milky_way:
