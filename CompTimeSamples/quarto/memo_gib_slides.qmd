---
title: "Julia: стадирование и динамическое программирование"
subtitle: (Числа "Гибоначчи")
author: "Сергей Анатольевич Романенко"
institute: "Институт им. М.В.Келдыша РАН"
# date: today
date: 2025-03-12
title-slide-attributes:
  data-background-color: "beige"
format:
  revealjs:
    theme:
      - default
      - memo_gib_slides.scss
    from: markdown+emoji
    lang: ru-RU
    code-fold: false
    code-line-numbers: false
    code-block-height: 680px
    slide-number: true
    # smaller: true
    embed-resources: true
    # chalkboard: true
execute:
  echo: true
jupyter: julia-1.11
---

# Пререквизиты

## Что будем использовать?

```{julia}
using Test
```

Пакет `Test` используется для "тестирования по частям" (unit testing).

```{julia}
using MacroTools: prettify
```

Функция `prettify` используется для удаления "мусора" (номеров строк
исходной программы).

# Подопытный кролик: числа "Гибоначчи"

## Числа Фибоначчи

```{julia}
#| output: false
fib(n) =
    if n == 0
        0
    elseif n == 1
        1
    else
        fib(n - 2) + fib(n - 1)
    end
```

```{julia}
Tuple(fib(n) for n in 0:10)
```

Проблема в том, что у `fib` - только один аргумент. А если мы хотим
специализировать функцию по значениям некоторых аргументов, то этих
аргументов должно быть ≥ 2.

Посему, переходим к рассмотрению чисел "Гибоначчи".

## Числа "Гибоначчи"

```{julia}
#| output: false
gib(n, x, y) =
    if n == 0
        x
    elseif n == 1
        y
    else
        gib(n - 2, x, y) + gib(n - 1, x, y)
    end
```

Проверяем.

```{julia}
@test Tuple(gib(n, 0, 1) for n in 0:10) ==
      (0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55)
@test Tuple(gib(n, 2, 3) for n in 0:10) ==
      (2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233)
```

## Мемоизация: реализация

```{julia}
#| output: false
function gib_memo!(d, n, x, y)
    haskey(d, n) && return d[n]

    r =
        if n == 0
            x
        elseif n == 1
            y
        else
            gib_memo!(d, n - 2, x, y) + gib_memo!(d, n - 1, x, y)
        end

    @show n
    d[n] = r
end

function gib_memo(n, x, y)
    gib_memo!(Dict(), n, x, y)
end
```

Вставили `@show`, чтобы проверить, что `gib(n)` для каждого `n`
вычисляется только один раз.

## Мемоизация: проверка

```{julia}
gib_memo(10, 2, 3)
```

## Превращаем вычислитель в генератор

```{julia}
#| output: false
function gib_gen!(d, es, n)
    haskey(d, n) && return d[n]

    d[n] =
        if n == 0 (:x) elseif n == 1 (:y)
        else
            g = Symbol("g_", n)
            push!(es,
                :($g = $(gib_gen!(d, es, n - 2)) + $(gib_gen!(d, es, n - 1))))
            g
        end
end

function gib_gen(n)
    es = Expr[]
    r = gib_gen!(Dict(), es, n)

    quote $(es...); $r end
end
```

## Проверяем генератор

```{julia}
gib_gen(0) |> prettify
```

```{julia}
gib_gen(1) |> prettify
```
<!--
```{julia}
gib_gen(3) |> prettify
```
 -->

```{julia}
gib_gen(10) |> prettify
```

## Обёртываем `gib_gen` в генерирующую функцию

```{julia}
#| output: false
@generated function gib_gen(::Val{n}, x, y) where {n}
    gib_gen(n)
end
```
Проверяем.

```{julia}
@test Tuple(gib_gen(Val(n), 2, 3) for n in 0:10) ==
      (2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233)
```

# Использование комбинаторов

## Какая потенциальная польза?

- Можно отделить мемоизацию от вычислений ("разделение аспектов").
- Одно и то же определение функции может исполняться как с мемоизацией,
  так и без оной.
- Один и тот же механизм мемоизации может использоваться для разных
  функций.

## Классический `fix`

Можно "упрятать" рекурсию в комбинатор `fix`.

```{julia}
#| output: false
fix(f, xs...) = f((ys...) -> fix(f, ys...), xs...)
```

Тогда рекурсивную функцию можно превратить в (как бы) нерекурсивную.

```{julia}
#| output: false
gib_step(self, n, x, y) =
    if n == 0
        x
    elseif n == 1
        y
    else
        self(n - 2, x, y) + self(n - 1, x, y)
    end
```

И вызывать её с помощью `fix`.

```{julia}
@test Tuple(fix(gib_step, n, 2, 3) for n in 0:10) ==
      (2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233)
```

Работает... Но выглядит как явное **извращение**! Зачем так делать?

## Какая польза может быть от комбинаторов?

Можно добавить а `fix` дополнительные действия, которые будут
совершаться перед вызовом функции и после оного.

```{julia}
#| output: false
function fix_trace(f, xs...)
    println("Calling ", string(f), string(xs))
    r = f((ys...) -> fix_trace(f, ys...), xs...)
    println("Returning ", string(f), string(xs), " = ", r)
    return r
end
```

Проверяем.

```{julia}
fix_trace(gib_step, 3, 2, 3)
```

## А если "упрятать" в `fix` мемоизацию?

А почему бы и нет? В результате получаем следующую пользу.

- **Одно и то же определение функции** может исполняться как с
  мемоизацией, так и без оной.
- Один и тот же **механизм мемоизации** может использоваться для разных
  функций.

В частности, не меняя текст `fib_step`, можно будет проводить вычисления
как с мемоизацией, так и без оной.

## Реализация `fix_memo`

```{julia}
#| output: false
function fix_memo!(d, f, xs...)
    haskey(d, xs) && d[xs]
    d[xs] = f((ys...) -> fix_memo!(d, f, ys...), xs...)
end

fix_memo(f, xs...) = fix_memo!(Dict(), f, xs... )
```

Проверяем.

```{julia}
@test Tuple(fix_memo(gib_step, n, 2, 3) for n in 0:10) ==
      (2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233)
```

# Определения `fix_trace` и `fix_memo` через `fix`

\
(Непонятно, есть ли в этом практический смысл? Но, с точки зрения науки,
- любопытно...)

## `fix_trace` через `fix`

```{julia}
#| output: false
function trace_step(self, f, xs...)
    println("Calling ", string(f), string(xs))
    r = f((ys...) -> self(f, ys...), xs...)
    println("Returning ", string(f), string(xs), " = ", r)
    return r
end
```

Проверяем.

```{julia}
fix(trace_step, gib_step, 3, 2, 3)
```

## `fix_memo` через `fix`

```{julia}
#| output: false
function mk_memo_step()
    d = Dict()

    (self, f, xs...) -> begin
        haskey(d, xs) && return d[xs]
        r = f((ys...) -> self(f, ys...), xs...)
        d[xs] = r
    end
end
```

Проверяем.

```{julia}
@test Tuple(fix(mk_memo_step(), gib_step, n, 2, 3) for n in 0:10) ==
    (2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233)
```

## Композиция "инструментовок"

```{julia}
#| output: false
fix2(g, f) =
    (xs...) ->
        f((ys...) ->
                g((zs...) ->
                        fix2(g, f)(zs...), ys...), xs...)
```

```{julia}
@test fix2(mk_memo_step(), trace_step)(gib_step, 3, 2, 3) == 8
```

## Выводы (по поводу комбинаторов)

- Комбинаторы дают возможность "перехватывать" вызовы функций и
  вставлять "инструментовку" (отладочную печать, мемоизацию).
- Можно исполнять функцию без инструментовки или с разными наборами
  инструментовок.
- Использование комбинаторов позволяет "разделять аспекты" (например,
  вычисления - отдельно, а мемоизация - отдельно).
- В случае простых генераторов, может оказаться, что "игра не стоит
  свеч". Ибо проще вставлять что-то в генератор напрямую, чем делать это
  с помощью комбинаторов (делая из простой программы загадочную).
