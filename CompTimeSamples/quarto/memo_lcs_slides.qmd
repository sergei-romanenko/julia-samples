---
title: "Julia: стадирование и динамическое программирование"
subtitle: "(Longest Common Subsequence)"
author: "Сергей Анатольевич Романенко"
institute: "Институт им. М.В.Келдыша РАН"
# date: today
date: 2025-03-01
# bibliography: shonan_hmm_slides.bib
# csl: nature-no-superscript.csl
title-slide-attributes: 
  data-background-color: "beige"
format:
  revealjs:
    theme:
      - default
      - memo_lcs_slides.scss
    from: markdown+emoji
    lang: ru-RU
    code-fold: false
    code-line-numbers: false
    code-block-height: 680px
    slide-number: true
    # smaller: true
    embed-resources: true
    # chalkboard: true
execute: 
  echo: true
jupyter: julia-1.11
---

# Проблема: найти длину самой длинной общей подпоследовательности

## Решаемая проблема

Подпоследовательность - это строка, сгенерированная из исходной строки
путем удаления 0 или более символов и без изменения относительного
порядка остальных символов.

Например, подпоследовательностями “ABC” являются “”, “A”, “B”, “C”,
“AB”, “AC”, “BC” и “ABC”.

В общем случае, строка длины $n$ имеет $2^n$ подпоследовательностей.

\
**Задача.**

> **Заданы две строки s1 и s2. Требуется найти длину самой длинной общей
> подпоследовательности. Если общей подпоследовательности нет - выдать
> 0.**

Обозначим через `lcs(i, j, s1, s2)` длину самой длинной общей
подпоследовательности для `s1[1:i]` и `s2[1:j]`.

## Примеры подпоследовательностей {.smaller}

```{dot}
//| echo: false
//| fig-height: 2.0
//| fig-align: center
graph {
  rankdir=TD
  ranksep="0.3"
  nodesep="0.1"

node [ fontsize=12 shape=circle margin=0.0 width=0.0 ]

u1 [ label="A" ]
u2 [ label="B" ]
u3 [ label="C" ]

v1 [ label="A" ]
v2 [ label="C" ]
v3 [ label="D" ]

{
    rank=same
    edge [ style=invis ]
    u1 -- u2 -- u3
}
{
    rank=same
    edge [ style=invis ]
    v1 -- v2 -- v3
}
{
    edge [ style=invis ]
    // u1 -- v1
    u3 -- v3
}
{
    edge [ constraint=false ]
    u1 -- v1
    u3 -- v2
}
}
```

<hr>

:::: {.columns}

::: {.column width="50%"}

```{dot}
//| echo: false
//| fig-height: 2.0
//| fig-width: 4.0
//| fig-align: center
graph {
  rankdir=TD
  ranksep="0.3"
  nodesep="0.1"

node [ fontsize=14 shape=circle margin=0.0 width=0.0 ]

u1 [ label="A" ]
u2 [ label="B" ]
u3 [ label="C" ]

v1 [ label="C" ]
v2 [ label="B" ]
v3 [ label="A" ]

{
    rank=same
    edge [ style=invis ]
    u1 -- u2 -- u3
}
{
    rank=same
    edge [ style=invis ]
    v1 -- v2 -- v3
}
{
    edge [ style=invis ]
    // u1 -- v1
    u3 -- v3
}
{
    edge [ constraint=false ]
    u1 -- v3
    // u3 -- v2
}
}
```

:::

::: {.column width="50%"}

```{dot}
//| echo: false
//| fig-height: 2.0
//| fig-width: 4.0
//| fig-align: center
graph {
  rankdir=TD
  ranksep="0.3"
  nodesep="0.1"

node [ fontsize=14 shape=circle margin=0.0 width=0.0 ]

u1 [ label="A" ]
u2 [ label="B" ]
u3 [ label="C" ]

v1 [ label="C" ]
v2 [ label="B" ]
v3 [ label="A" ]

{
    rank=same
    edge [ style=invis ]
    u1 -- u2 -- u3
}
{
    rank=same
    edge [ style=invis ]
    v1 -- v2 -- v3
}
{
    edge [ style=invis ]
    // u1 -- v1
    u3 -- v3
}
{
    edge [ constraint=false ]
    // u1 -- v3
    u3 -- v1
}
}
```

:::

::::

<hr>

```{dot}
//| echo: false
//| fig-height: 2.0
//| fig-align: center
graph {
  rankdir=TD
  ranksep="0.3"
  nodesep="0.1"

node [ fontsize=14 shape=circle margin=0.0 width=0.0 ]

u1 [ label="A" ]
u2 [ label="G" ]
u3 [ label="G" ]
u4 [ label="T" ]
u5 [ label="A" ]
u6 [ label="B" ]
u7 [ label="?" style="invis" ]

v1 [ label="G" ]
v2 [ label="X" ]
v3 [ label="T" ]
v4 [ label="X" ]
v5 [ label="A" ]
v6 [ label="Y" ]
v7 [ label="B" ]

{
    rank=same
    edge [ style=invis ]
    u1 -- u2 -- u3 -- u4 -- u5 -- u6 -- u7
}
{
    rank=same
    edge [ style=invis ]
    v1 -- v2 -- v3 -- v4 -- v5 -- v6 -- v7
}
{
    edge [ style=invis ]
    u1 -- v1
    u7 -- v7
}
{
    edge [ constraint=false ]
    u3 -- v1
    u4 -- v3
    u5 -- v5
    u6 -- v7
}
}
```

# Рекурсивный алгоритм
\
**Время - $O(2^{\min(m,n)})$, память - $O(\min(m, n))$**

## "Разделяй и властвуй"

:::: {.columns}

::: {.column width="45%"}

**Сведение задачи к подзадачам:**

```{dot}
//| echo: false
//| fig-width: 4.3
//| fig-align: center
digraph {
  rankdir=TD
  ranksep="0.7"
  nodesep="0.4"

node [ fontsize=20 ]
node [ shape=box ]

Problem [ label="Задача" ]
Subproblem1 [ label="Подзадача 1"]
Subproblem2 [ label="Подзадача 2"]

node [ shape=box style=rounded ]
Solution1 [ label="Решение 1"]
Solution2 [ label="Решение 2"]
Solution [ label="Решение"]
Combine12 [ label="" shape=circle fixedsize=true width=0.5]

Problem -> Subproblem1 [ style=dashed ]
Subproblem1 -> Solution1

Problem -> Subproblem2 [ style=dashed ]
Subproblem2 -> Solution2

Solution1 -> Combine12
Solution2 -> Combine12

Combine12 -> Solution
}
```

:::

::: {.column width="55%"}

**При вычислении `lcs(i, j, s1, s2)` рассматриваем 3 случая.**

- `i == 0 || j == 0`. Обе строки пустые.
- `s1[i] == s2[j]`. Сопоставляем `s1[i]` и `s2[j]` и решаем подзадачу
  `lcs(i - 1, j - 1, s1, s2)`.
- В противном случае решаем две подзадачи, lcs(i, j - 1, s1, s2) и
  `lcs(i - 1, j, s1, s2)`.

:::

::::


## "Наивный" рекурсивный алгоритм

Время - $O(2^{\min(m,n)})$, память - $O(\min(m, n))$

```{julia}
#| output: false
# A Naive recursive implementation of LCS problem

# Returns length of LCS for s1[1:i], s2[1:j]
function lcs(i, j, s1, s2)
    if (i == 0 || j == 0)
        0
    elseif (s1[i] == s2[j])
        1 + lcs(i - 1, j - 1, s1, s2)
    else
        max(lcs(i, j - 1, s1, s2), lcs(i - 1, j, s1, s2))
    end
end

lcs(s1, s2) = lcs(length(s1), length(s2), s1, s2)
```

## Тестируем алгоритм

Для тестирования используем пакет `Test`.

```{julia}
using Test

@test lcs("ABC", "ACD") == 2
# The longest common subsequence is “GTAB”.
@test lcs("AGGTAB", "GXTXAYB") == 4
@test lcs("ABC", "CBA") == 1
```

Получается то, что надо...

# Мемоизация
\
**Время - $O(m * n)$, память - $O(m * n)$.**

## Рекурсивный алгоритм с мемоизацией

<!-- Время - $O(m * n)$, память - $O(m * n)$. -->

```{julia}
#| output: false
function lcs_memo(i, j, d, s1, s2)
    haskey(d, (i, j)) && return d[(i, j)]

    r =
        if (i == 0 || j == 0)
            0
        else
            if (s1[i] == s2[j])
                1 + lcs_memo(i - 1, j - 1, d, s1, s2)
            else
                max(lcs_memo(i, j - 1, d, s1, s2), lcs_memo(i - 1, j, d, s1, s2))
            end
        end

    d[(i, j)] = r; return r
end

function lcs_memo(s1, s2)
    d = Dict{Tuple{Int,Int},Int}()
    lcs_memo(length(s1), length(s2), d, s1, s2)
end
```

## Тестируем

```{julia}
@test lcs_memo("ABC", "ACD") == 2
# The longest common subsequence is “GTAB”.
@test lcs_memo("AGGTAB", "GXTXAYB") == 4
@test lcs_memo("ABC", "CBA") == 1
```

Получается то, что надо...

# Специализация `lcs_memo(s1, s2)` по `i` и `j`

## Источники вдохновения

- Peter Thiemann. 1999. **Combinators for program generation.** J.
  Funct. Program. 9, 5 (September 1999), 483–525.
  <https://doi.org/10.1017/S0956796899003469>

- Kedar Swadi, Walid Taha, Oleg Kiselyov. 2005. **Staging dynamic
  programming algorithms**. Unpublished manuscript (April 2005),
  available from: <http://www.cs.rice.edu/~taha/publications.html>.

- Yukiyoshi Kameyama, Oleg Kiselyov, and Chung-chieh Shan. 2009.
  **Shifting the stage: staging with delimited control.** In Proceedings
  of the 2009 ACM SIGPLAN workshop on Partial evaluation and program
  manipulation (PEPM '09). Association for Computing Machinery, New
  York, NY, USA, 111–120. <https://doi.org/10.1145/1480945.1480962>

- Oleg Kiselyov. 2010. **Delimited control in OCaml, abstractly and
  concretely: system description.** In Proceedings of the 10th
  international conference on Functional and Logic Programming
  (FLOPS'10). Springer-Verlag, Berlin, Heidelberg, 304–320.
  <https://doi.org/10.1007/978-3-642-12251-4_22>

## "Наивный" генератор.

Берём функцию `lcs_memo` и наивно разделяем части, которые будут
исполняться на первом этапе, и части, которые будут исполняться на
втором этапе.

```{julia}
#| output: false
function lcs_gen_impl1(i, j)
    if (i == 0 || j == 0)
        0
    else
        quote
            if (s1[$i] == s2[$j])
                1 + $(lcs_gen_impl1(i - 1, j - 1))
            else
                max($(lcs_gen_impl1(i, j - 1)), $(lcs_gen_impl1(i - 1, j)))
            end
        end
    end
end
```


## Результат вычисления `lcs_gen_impl1(2, 3)`

Функция `prettify` используется для очистки генерируемого кода от
"мусора" (ссылок на номера строк в программе-генераторе).

```{julia}
using MacroTools: prettify
```

Теперь посмотрим, что сгенерируется при вызове `lcs_gen_impl1(2, 3)`.

```julia
lcs_gen_impl1(2, 3) |> prettify
```
(Смотрим следующий слайд.)

## Результат вычисления `lcs_gen_impl1(2, 3)`

<hr>

```{julia}
#| echo: false
lcs_gen_impl1(2, 3) |> prettify
```

<hr>

Получается одно громадное выражение, в котором есть
совпадающие подвыражения.

## Промежуточные переменные

Не очень хорошо, когда выражения получаются слишком большими. (Это может
"взорвать" компилятор, и читать трудно.)

Посему, введём переменные для промежуточных результатов.

```{julia}
#| output: false
function lcs_gen_impl2(i, j)
    if (i == 0 || j == 0)
        0
    else
        r0 = Symbol("r_", i - 1, "_", j - 1)
        r1 = Symbol("r_", i, "_", j - 1)
        r2 = Symbol("r_", i - 1, "_", j)
        quote
            if (s1[$i] == s2[$j])
                    $r0 = $(lcs_gen_impl2(i - 1, j - 1))
                    1 + $r0
            else
                    $r1 = $(lcs_gen_impl2(i, j - 1))
                    $r2 = $(lcs_gen_impl2(i - 1, j))
                    max($r1, $r2)
            end
        end
    end
end
```

## Проверяем

```{julia}
lcs_gen_impl2(2, 3) |> prettify
```

<hr>

Видно, что **одни и тех же выражения** в программе **повторяются
несколько раз**. Это - нехорошо...

## Оформляем `lcs_gen2` как `generated` function

```{julia}
#| output: false
@generated function lcs_gen2(::Val{i}, ::Val{j}, s1, s2) where {i,j}
    lcs_gen_impl2(i, j)
end

function lcs_gen2(s1, s2)
    lcs_gen2(Val(length(s1)), Val(length(s2)), s1, s2)
end
```

Проверяем

```{julia}
@test lcs_gen2("ABC", "ACD") == 2
# The longest common subsequence is “GTAB”.
# @test lcs_gen2("AGGTAB", "GXTXAYB") == 4
@test lcs_gen2("ABC", "CBA") == 1
```

# Мемоизация в процессе генерации программы

## Выносим присваивания из-под `if`

Подготовка к мемоизации! Теперь будут выполняться лишние вычисления, но
**асимптотика** от этого **не изменится**.

```{julia}
#| output: false
function lcs_gen_impl3(i, j)
    if (i == 0 || j == 0)
        0
    else
        r0 = Symbol("r_", i - 1, "_", j - 1)
        r1 = Symbol("r_", i, "_", j - 1)
        r2 = Symbol("r_", i - 1, "_", j)
        quote
            $r0 = $(lcs_gen_impl3(i - 1, j - 1))
            $r1 = $(lcs_gen_impl3(i, j - 1))
            $r2 = $(lcs_gen_impl3(i - 1, j))
            if (s1[$i] == s2[$j])
                1 + $r0
            else
                max($r1, $r2)
            end
        end
    end
end
```

## Проверяем

```{julia}
lcs_gen_impl3(2, 3) |> prettify
```

<hr>

**Недостатки:** (1) Некоторые выражение вычисляется и присваивается
несколько раз, (2) генерируются переменные, которым присваиваются
константы.

## Мемоизация общих подвыражений, подстановка констант

Можно решить эти две проблемы, заведя словарь, в котором будет
регистрироваться, какие подвыражения уже вычислялись, а какие - нет.

В результате получим асимптотику: время - $O(m * n)$, память - $O(m *
n)$.

```{julia}
#| output: false
function ass!(es, d, s::Symbol, c::Int64)
    d[s] = c
end

function ass!(es, d, s::Symbol, u::Symbol)
    d[s] = u
end

function ass!(es, d, s::Symbol, e)
    haskey(d, s) && return
    d[s] = s
    push!(es, :($s = $e))
end
```

## Мемоизация общих подвыражений, подстановка констант

```{julia}
#| output: false
function lcs_gen_impl4!(es, d, i, j)
    r = Symbol("r_", i, "_", j)

    haskey(d, r) && return d[r]

    if (i == 0 || j == 0)
        ass!(es, d, r, 0)
    else
        r0 = lcs_gen_impl4!(es, d, i - 1, j - 1)
        r1 = lcs_gen_impl4!(es, d, i, j - 1)
        r2 = lcs_gen_impl4!(es, d, i - 1, j)
        ass!(es, d, r, :(
            s1[$i] == s2[$j] ? 1 + $r0 : max($r1, $r2)
        ))
    end

    return d[r]
end
```

## Мемоизация общих подвыражений, подстановка констант

```{julia}
#| output: false
function lcs_gen_impl4(i, j)
    es = Expr[]
    d = Dict{Symbol,Any}()
    r = lcs_gen_impl4!(es, d, i, j)

    quote
        $(es...)
        return $r
    end
end
```

## Проверяем

```{julia}
lcs_gen_impl4(2, 3) |> prettify
```

<hr>

Теперь получилась "линейная программа": последовательность присваиваний,
в которой каждая переменная получает значение только один раз.

## Оформляем `lcs_gen4` как `generated` function

```{julia}
#| output: false
@generated function lcs_gen4(::Val{i}, ::Val{j}, s1, s2) where {i,j}
    lcs_gen_impl4(i, j)
end

function lcs_gen4(s1, s2)
    lcs_gen4(Val(length(s1)), Val(length(s2)), s1, s2)
end
```

Проверяем:

```{julia}
@test lcs_gen4("ABC", "ACD") == 2
# The longest common subsequence is “GTAB”.
@test lcs_gen4("AGGTAB", "GXTXAYB") == 4
@test lcs_gen4("ABC", "CBA") == 1
```

# Упрощение выражений через переписывание (`Metatheory.jl`)

\

- Устраняем сложения констант: `1 + 0`.
- Упрощаем выражения: `max(0, y)`.

## Пакет `Metatheory.jl`: реализация правил переписывания

```{julia}
#| output: false
using Metatheory, Metatheory.Rewriters

opt_rules = @theory x y begin

    x::Int64 + y::Int64 => x + y

    max(0, y) --> y
    max(x, 0) --> x

end

strategy = (#= Fixpoint ∘ =# Postwalk ∘ Chain)
opt_expr(e) = strategy(opt_rules)(e)
```
Проверяем:
```{julia}
@test opt_expr(:(2 + 3)) == 5
@test opt_expr(:(max(10, 0))) == 10
@test opt_expr(:(max(0, 20))) == 20
@test opt_expr(:(true ? 1 + 2 : 3 + 4)) == :(true ? 3 : 7)
```

## Генерация программы с упрощениями

```{julia}
#| output: false
function ass_o!(es, d, s::Symbol, e)
    ass!(es, d, s, opt_expr(e))
end

function lcs_gen_impl5!(es, d, i, j)
    r = Symbol("r_", i, "_", j)

    haskey(d, r) && return d[r]

    if (i == 0 || j == 0)
        ass_o!(es, d, r, 0)
    else
        r0 = lcs_gen_impl5!(es, d, i - 1, j - 1)
        r1 = lcs_gen_impl5!(es, d, i, j - 1)
        r2 = lcs_gen_impl5!(es, d, i - 1, j)
        ass_o!(es, d, r, :(
            s1[$i] == s2[$j] ? 1 + $r0 : max($r1, $r2)
        ))
    end

    return d[r]
end
```

## Генерация программы с упрощениями

```{julia}
#| output: false
function lcs_gen_impl5(i, j)
    es = Expr[]
    d = Dict{Symbol,Any}()
    r = lcs_gen_impl5!(es, d, i, j)

    quote
        $(es...)
        return $r
    end
end
```

## Проверяем

```{julia}
lcs_gen_impl5(2, 3) |> prettify
```

<hr>

Присваивания констант и лишние `max` исчезли!

## Оформляем `lcs_gen5` как `generated` function

```{julia}
#| output: false
@generated function lcs_gen5(::Val{i}, ::Val{j}, s1, s2) where {i,j}
    lcs_gen_impl5(i, j)
end

function lcs_gen5(s1, s2)
    lcs_gen5(Val(length(s1)), Val(length(s2)), s1, s2)
end
```
Проверяем:
```{julia}
@test lcs_gen5("ABC", "ACD") == 2
# # The longest common subsequence is “GTAB”.
@test lcs_gen5("AGGTAB", "GXTXAYB") == 4
@test lcs_gen5("ABC", "CBA") == 1
```

# Мудрые умозаключения

## Выводы

- Исходная программа - **рекурсивная**, но, после специализации,
  получается **линейная** программа (которая, в частности, подходит для
  FPGA).
- В сгенерированной программе **нет явной мемоизации**, поскольку она
  уже выполнена во время генерации.
- В сгенерированной программе нет **лишних присваиваний** и устранены
  **лишние операции**.
- Качественную специализированную программу **не всегда** удаётся
  получить с помощью "наивного" стадирования или "тупых" частичных
  вычислений.
