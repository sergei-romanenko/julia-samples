@inproceedings{Aktemur2013,
author = {Aktemur, Baris and Kameyama, Yukiyoshi and Kiselyov, Oleg and Shan, Chung-chieh},
title = {Shonan challenge for generative programming: short position paper},
year = {2013},
isbn = {9781450318426},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2426890.2426917},
doi = {10.1145/2426890.2426917},
abstract = {The appeal of generative programming is "abstraction without guilt": eliminating the vexing trade-off between writing high-level code and highly-performant code. Generative programming also promises to formally capture the domain-specific knowledge and heuristics used by high-performance computing (HPC)experts. How far along are we in fulfilling these promises? To gauge our progress, a recent Shonan Meeting on "bridging the theory of staged programming languages and the practice of high-performance computing" proposed to use a set of benchmarks, dubbed "Shonan Challenge".Shonan Challenge is a collection of crisp problems posed by HPC and domain experts, for which efficient implementations are known but were tedious to write and modify. The challenge is to generate a similar efficient implementation from the high-level specification of a problem, performing the same optimizations, but automatically. It should be easy to adjust optimizations and the specification, maintaining confidence in the generated code.We describe our initial set of benchmarks and provide three solutions to two of the problems. We hope that the Shonan Challenge will clarify the state of the art and stimulate the theory and technology of staging just as the POPLmark challenge did for meta-theory mechanization. Since each Shonan Challenge problem is a kernel of a significant HPC application, each solution has an immediate practical application.},
booktitle = {Proceedings of the ACM SIGPLAN 2013 Workshop on Partial Evaluation and Program Manipulation},
pages = {147â€“154},
numpages = {8},
keywords = {staging, high-performance computing, generative programming, domain-specific languages, code generation},
location = {Rome, Italy},
series = {PEPM '13}
}
